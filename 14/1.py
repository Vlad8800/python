import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from urllib.request import urlopen
import io

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
plt.style.use('seaborn-v0_8')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

print("=== –õ–ê–ë–û–†–ê–¢–û–†–ù–ê –†–û–ë–û–¢–ê ‚Ññ14 ===")
print("–ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞—Å–æ–±–∞–º–∏ Python")
print("=" * 50)

# ========================================
# –ó–ê–í–î–ê–ù–ù–Ø 1: –ê–Ω–∞–ª—ñ–∑ –æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
# ========================================
print("\nüìä –ó–ê–í–î–ê–ù–ù–Ø 1: –ê–Ω–∞–ª—ñ–∑ –¥–∞—Ç–∞—Å–µ—Ç—É House Prices")
print("-" * 50)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç–∞—Å–µ—Ç –ø—Ä–æ —Ü—ñ–Ω–∏ –Ω–∞ –∂–∏—Ç–ª–æ
try:
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞—Ç–∞—Å–µ—Ç –ø—Ä–æ —Ü—ñ–Ω–∏ –Ω–∞ –∂–∏—Ç–ª–æ –∑ kaggle
    house_url = "https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv"
    df1 = pd.read_csv(house_url)
    print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑:", house_url)
except:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç, —è–∫—â–æ –ø–µ—Ä—à–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    print("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç")
    np.random.seed(42)
    df1 = pd.DataFrame({
        'price': np.random.normal(300000, 100000, 500),
        'area': np.random.normal(150, 50, 500),
        'bedrooms': np.random.choice([1, 2, 3, 4, 5], 500),
        'location': np.random.choice(['Downtown', 'Suburb', 'Rural'], 500),
        'age': np.random.randint(0, 50, 500)
    })

print("\n1. –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ DataFrame:")
print("-" * 30)

# head ‚Äì –ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤
print("üîπ head() - –ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤:")
print(df1.head())

# tail ‚Äì –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—è–¥–∫—ñ–≤
print("\nüîπ tail() - –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—è–¥–∫—ñ–≤:")
print(df1.tail())

# shape ‚Äì —Ä–æ–∑–º—ñ—Ä DataFrame
print(f"\nüîπ shape - –†–æ–∑–º—ñ—Ä DataFrame: {df1.shape}")

# columns ‚Äì –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
print(f"\nüîπ columns - –ù–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤: {list(df1.columns)}")

# dtypes ‚Äì —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
print("\nüîπ dtypes - –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö:")
print(df1.dtypes)

# describe ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüîπ describe() - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –æ–ø–∏—Å:")
print(df1.describe())

# loc, iloc ‚Äì –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö
print("\nüîπ loc/iloc - –ü—Ä–∏–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö:")
print("–ü–µ—Ä—à—ñ 3 —Ä—è–¥–∫–∏ —ñ –ø–µ—Ä—à—ñ 2 —Å—Ç–æ–≤–ø—Ü—ñ:")
print(df1.iloc[:3, :2])

# value_counts –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
categorical_cols = df1.select_dtypes(include=['object']).columns
if len(categorical_cols) > 0:
    print(f"\nüîπ value_counts() –¥–ª—è —Å—Ç–æ–≤–ø—Ü—è '{categorical_cols[0]}':")
    print(df1[categorical_cols[0]].value_counts())

# unique ‚Äì —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
print(f"\nüîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —É –∫–æ–∂–Ω–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ:")
for col in df1.columns:
    print(f"{col}: {df1[col].nunique()}")

# corr ‚Äì –∫–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ —á–∏—Å–ª–æ–≤–∏–º–∏ —Å—Ç–æ–≤–ø—Ü—è–º–∏
numeric_df = df1.select_dtypes(include=[np.number])
if len(numeric_df.columns) > 1:
    print("\nüîπ corr() - –ú–∞—Ç—Ä–∏—Ü—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó:")
    print(numeric_df.corr().round(3))

# sample ‚Äì –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞
print("\nüîπ sample() - –í–∏–ø–∞–¥–∫–æ–≤—ñ 3 —Ä—è–¥–∫–∏:")
print(df1.sample(3))
