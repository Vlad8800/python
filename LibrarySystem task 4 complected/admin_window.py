from tkinter import *
from tkinter import ttk, messagebox
import tkinter as tk
from tkinter import ttk
from database import get_db_connection
from utils import get_books, get_reading_rooms
import login_window

def get_books():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT book_id, title FROM Books")
    books = cursor.fetchall()
    conn.close()
    return books

def get_reading_rooms():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT room_id, name FROM ReadingRooms")
    rooms = cursor.fetchall()
    conn.close()
    return rooms

def get_libraries():
    """–û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT library_id, name FROM Libraries")
    libraries = cursor.fetchall()
    conn.close()
    return libraries

def get_reading_rooms_by_library(library_id):
    """–û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Ç–∞–ª—å–Ω—ñ –∑–∞–ª–∏ –≤–∫–∞–∑–∞–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT room_id, name FROM ReadingRooms WHERE library_id = %s", (library_id,))
    rooms = cursor.fetchall()
    conn.close()
    return rooms
import tkinter as tk
from tkinter import messagebox
from database import get_db_connection

import tkinter as tk
from tkinter import messagebox
from database import get_db_connection

import tkinter as tk
from tkinter import messagebox
from database import get_db_connection


import tkinter as tk
from tkinter import messagebox
from database import get_db_connection
def find_books_by_work_or_author():
    search_window = tk.Toplevel()
    search_window.title("–ü–æ—à—É–∫ –∫–Ω–∏–≥ –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–∞ –∞–≤—Ç–æ—Ä–æ–º")
    search_window.geometry("700x600")

    # –§—Ä–µ–π–º –¥–ª—è –ø–æ—à—É–∫—É –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
    book_frame = tk.LabelFrame(search_window, text="–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é", padx=10, pady=10)
    book_frame.pack(fill="x", padx=10, pady=5)

    tk.Label(book_frame, text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏:").pack(anchor="w")
    title_entry = tk.Entry(book_frame, width=60)
    title_entry.pack(pady=5)

    # –§—Ä–µ–π–º –¥–ª—è –ø–æ—à—É–∫—É –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
    author_frame = tk.LabelFrame(search_window, text="–ü–æ—à—É–∫ –≤—Å—ñ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞", padx=10, pady=10)
    author_frame.pack(fill="x", padx=10, pady=5)

    tk.Label(author_frame, text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–≤—Ç–æ—Ä–∞:").pack(anchor="w")
    author_entry = tk.Entry(author_frame, width=60)
    author_entry.pack(pady=5)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    result_frame = tk.LabelFrame(search_window, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É", padx=10, pady=10)
    result_frame.pack(fill="both", expand=True, padx=10, pady=5)

    result_box = tk.Text(result_frame, width=85, height=20, wrap=tk.WORD)
    result_box.pack(fill="both", expand=True, padx=5, pady=5)

    scrollbar = tk.Scrollbar(result_box)
    scrollbar.pack(side="right", fill="y")
    result_box.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=result_box.yview)

    def search_by_title():
        """–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é"""
        title_query = title_entry.get().strip()
        if not title_query:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏!")
            return

        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("""
                SELECT b.book_id, b.title, CONCAT(a.name, ' ', a.surname) AS author, 
                       b.access_type, b.inventory_number
                FROM Books b
                JOIN Authors a ON b.author_id = a.author_id
                WHERE b.title LIKE %s
            """, (f"%{title_query}%",))

            books = cursor.fetchall()
            result_box.delete(1.0, tk.END)

            if not books:
                result_box.insert(tk.END, f"üì≠ –ö–Ω–∏–≥ –∑ –Ω–∞–∑–≤–æ—é '{title_query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n")
                return

            result_box.insert(tk.END, f"üìö –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –∑–∞ –Ω–∞–∑–≤–æ—é '{title_query}': {len(books)}\n\n")
            
            for book_id, title, author, access_type, inventory_number in books:
                result_box.insert(tk.END, f"üìò '{title}' (–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä: {inventory_number})\n")
                result_box.insert(tk.END, f"   –ê–≤—Ç–æ—Ä: {author}\n")
                result_box.insert(tk.END, f"   –î–æ—Å—Ç—É–ø: {access_type}\n")

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–±—ñ—Ä–∫–∏
                cursor.execute("""
                    SELECT c.collection_id, c.title, c.year
                    FROM CollectionItems ci
                    JOIN Collections c ON ci.collection_id = c.collection_id
                    WHERE ci.book_id = %s
                """, (book_id,))
                collections = cursor.fetchall()

                if collections:
                    result_box.insert(tk.END, "   üîó –ù–∞–ª–µ–∂–∏—Ç—å –¥–æ –∑–±—ñ—Ä–æ–∫:\n")
                    for coll_id, coll_title, year in collections:
                        result_box.insert(tk.END, f"      ‚Ä¢ {coll_title} (ID: {coll_id}, {year})\n")
                else:
                    result_box.insert(tk.END, "   ‚ùå –ù–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –∂–æ–¥–Ω–æ—ó –∑–±—ñ—Ä–∫–∏\n")
                result_box.insert(tk.END, "\n")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É:\n{e}")
        finally:
            conn.close()

    def search_by_author():
        """–ü–æ—à—É–∫ –≤—Å—ñ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞"""
        author_query = author_entry.get().strip()
        if not author_query:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–≤—Ç–æ—Ä–∞!")
            return

        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("""
                SELECT b.book_id, b.title, CONCAT(a.name, ' ', a.surname) AS author, 
                       b.access_type, b.inventory_number
                FROM Books b
                JOIN Authors a ON b.author_id = a.author_id
                WHERE a.name LIKE %s OR a.surname LIKE %s
                ORDER BY b.title
            """, (f"%{author_query}%", f"%{author_query}%"))

            books = cursor.fetchall()
            result_box.delete(1.0, tk.END)

            if not books:
                result_box.insert(tk.END, f"üì≠ –ö–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ '{author_query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n")
                return

            result_box.insert(tk.END, f"üë§ –í—Å—ñ –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞ '{author_query}': {len(books)}\n\n")
            
            for book_id, title, author, access_type, inventory_number in books:
                result_box.insert(tk.END, f"üìò '{title}' (–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä: {inventory_number})\n")
                result_box.insert(tk.END, f"   –ê–≤—Ç–æ—Ä: {author}\n")
                result_box.insert(tk.END, f"   –î–æ—Å—Ç—É–ø: {access_type}\n")

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–±—ñ—Ä–∫–∏
                cursor.execute("""
                    SELECT c.collection_id, c.title, c.year
                    FROM CollectionItems ci
                    JOIN Collections c ON ci.collection_id = c.collection_id
                    WHERE ci.book_id = %s
                """, (book_id,))
                collections = cursor.fetchall()

                if collections:
                    result_box.insert(tk.END, "   üîó –ù–∞–ª–µ–∂–∏—Ç—å –¥–æ –∑–±—ñ—Ä–æ–∫:\n")
                    for coll_id, coll_title, year in collections:
                        result_box.insert(tk.END, f"      ‚Ä¢ {coll_title} (ID: {coll_id}, {year})\n")
                else:
                    result_box.insert(tk.END, "   ‚ùå –ù–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –∂–æ–¥–Ω–æ—ó –∑–±—ñ—Ä–∫–∏\n")
                result_box.insert(tk.END, "\n")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É:\n{e}")
        finally:
            conn.close()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É
    button_frame = tk.Frame(search_window)
    button_frame.pack(pady=10)

    tk.Button(button_frame, text="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –∫–Ω–∏–≥–∏", command=search_by_title, 
              bg="blue", fg="white", width=20).pack(side="left", padx=5)
    
    tk.Button(button_frame, text="–ü–æ—à—É–∫ –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞", command=search_by_author, 
              bg="green", fg="white", width=20).pack(side="left", padx=5)

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    def clear_results():
        result_box.delete(1.0, tk.END)
        title_entry.delete(0, tk.END)
        author_entry.delete(0, tk.END)

    tk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏", command=clear_results, 
              bg="gray", fg="white", width=10).pack(side="left", padx=5)
def get_librarians_worked_in_room():
    """–ü–æ–∫–∞–∑—É—î –≤—ñ–∫–Ω–æ –¥–ª—è –ø–æ—à—É–∫—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∑–∞–ª—ñ"""
    search_window = tk.Toplevel()
    search_window.title("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ –∑–∞ —á–∏—Ç–∞–ª—å–Ω–∏–º –∑–∞–ª–æ–º")
    search_window.geometry("600x500")
    
    # –í–∏–±—ñ—Ä –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
    tk.Label(search_window, text="–û–±–µ—Ä—ñ—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É:").pack(pady=5)
    libraries = get_libraries()
    library_map = {f"{name} (ID: {lib_id})": lib_id for lib_id, name in libraries}
    library_combo = ttk.Combobox(search_window, values=list(library_map.keys()), state="readonly", width=50)
    library_combo.pack(pady=5)
    
    # –í–∏–±—ñ—Ä —á–∏—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–ª—É
    tk.Label(search_window, text="–û–±–µ—Ä—ñ—Ç—å —á–∏—Ç–∞–ª—å–Ω–∏–π –∑–∞–ª:").pack(pady=5)
    room_combo = ttk.Combobox(search_window, state="readonly", width=50)
    room_combo.pack(pady=5)
    
    def update_rooms(*args):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞–ª—å–Ω–∏—Ö –∑–∞–ª—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏"""
        selected_library = library_combo.get()
        if selected_library:
            library_id = library_map[selected_library]
            rooms = get_reading_rooms_by_library(library_id)
            room_map = {f"{name} (ID: {room_id})": room_id for room_id, name in rooms}
            room_combo['values'] = list(room_map.keys())
            room_combo.set('')  # –û—á–∏—â—É—î–º–æ –≤–∏–±—ñ—Ä –∑–∞–ª—É
        else:
            room_combo['values'] = []
            room_combo.set('')
    
    library_combo.bind('<<ComboboxSelected>>', update_rooms)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    result_frame = tk.Frame(search_window)
    result_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    tk.Label(result_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:").pack(anchor='w')
    result_text = tk.Text(result_frame, wrap=tk.WORD, height=15)
    result_text.pack(fill=tk.BOTH, expand=True)
    
    def search_librarians():
        """–ü–æ—à—É–∫ –≤—Å—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∑–∞–ª—ñ"""
        selected_library = library_combo.get()
        selected_room = room_combo.get()
        
        if not selected_library:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É!")
            return
        if not selected_room:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —á–∏—Ç–∞–ª—å–Ω–∏–π –∑–∞–ª!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑ –≤–∏–±—Ä–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        library_id = library_map[selected_library]
        # –ü–∞—Ä—Å–∏–º–æ room_id –∑ —Ä—è–¥–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É "Name (ID: room_id)"
        room_id = selected_room.split("ID: ")[1].rstrip(")")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # SQL –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∑–∞–ª—ñ
        cursor.execute("""
            SELECT l.librarian_id, l.name, u.login,
                   COALESCE(stats.books_issued, 0) as books_issued,
                   stats.first_work_date,
                   stats.last_work_date
            FROM Librarians l
            INNER JOIN Users u ON l.librarian_id = u.user_id
            INNER JOIN ReadingRooms rr ON l.reading_room_id = rr.room_id
            LEFT JOIN (
                SELECT ib.librarian_id,
                       COUNT(ib.issue_id) as books_issued,
                       MIN(ib.issue_date) as first_work_date,
                       MAX(ib.issue_date) as last_work_date
                FROM IssuedBooks ib
                WHERE ib.room_id = %s
                GROUP BY ib.librarian_id
            ) stats ON l.librarian_id = stats.librarian_id
            WHERE l.reading_room_id = %s 
              AND rr.library_id = %s
            ORDER BY l.name
        """, (room_id, room_id, library_id))
        
        results = cursor.fetchall()
        conn.close()
        
        # –û—á–∏—â—É—î–º–æ —ñ –∑–∞–ø–æ–≤–Ω—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        result_text.delete(1.0, tk.END)
        
        if results:
            library_name = selected_library.split(" (ID:")[0]
            room_name = selected_room.split(" (ID:")[0]
            
            header = f"–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ, —è–∫—ñ –ø—Ä–∞—Ü—é—é—Ç—å —É –∑–∞–ª—ñ '{room_name}' –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ '{library_name}':\n\n"
            result_text.insert(tk.END, header)
            
            for librarian_id, name, login, books_count, first_date, last_date in results:
                info = f"‚Ä¢ {name} (ID: {librarian_id}, –õ–æ–≥—ñ–Ω: {login})\n"
                info += f"  –í–∏–¥–∞–Ω–æ –∫–Ω–∏–≥ —É —Ü—å–æ–º—É –∑–∞–ª—ñ: {books_count}\n"
                
                if first_date and last_date:
                    info += f"  –ü–µ—Ä—à–∞ –≤–∏–¥–∞—á–∞ –≤ –∑–∞–ª—ñ: {first_date}\n"
                    info += f"  –û—Å—Ç–∞–Ω–Ω—è –≤–∏–¥–∞—á–∞ –≤ –∑–∞–ª—ñ: {last_date}\n"
                else:
                    info += f"  –©–µ –Ω–µ –≤–∏–¥–∞–≤–∞–≤ –∫–Ω–∏–≥–∏ –≤ —Ü—å–æ–º—É –∑–∞–ª—ñ\n"
                
                info += "\n"
                result_text.insert(tk.END, info)
                
            result_text.insert(tk.END, f"–ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ: {len(results)} –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä(—ñ–≤)")
        else:
            result_text.insert(tk.END, "–£ –≤–∫–∞–∑–∞–Ω–æ–º—É —á–∏—Ç–∞–ª—å–Ω–æ–º—É –∑–∞–ª—ñ —Ü—ñ—î—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è.")
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—à—É–∫—É
    tk.Button(search_window, text="–ó–Ω–∞–π—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤", command=search_librarians, 
              bg="blue", fg="white", font=("Arial", 10)).pack(pady=10)
def save_distribution(book_id, selected_room_ids, shelf, row):
    conn = get_db_connection()
    cursor = conn.cursor()
    for room_id in selected_room_ids:
        cursor.execute("""
            INSERT INTO Placements (book_id, room_id, shelf, `row`) 
            VALUES (%s, %s, %s, %s)
        """, (book_id, room_id, shelf, row))
    conn.commit()
    conn.close()
    messagebox.showinfo("–£—Å–ø—ñ—à–Ω–æ", "–ö–Ω–∏–≥—É —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ –ø–æ —á–∏—Ç–∞–ª—å–Ω–∏—Ö –∑–∞–ª–∞—Ö!")

def find_who_has_book():
    search_window = tk.Toplevel()
    search_window.title("–•—Ç–æ –≤–∑—è–≤ –∫–Ω–∏–≥—É")
    search_window.geometry("450x350")

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–Ω–∏–≥–∏
    books = get_books()  # –ü–æ–≤–µ—Ä—Ç–∞—î [(id, title), ...]
    book_map = {f"{title} (ID: {book_id})": book_id for book_id, title in books}

    tk.Label(search_window, text="–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:").pack(pady=5)
    book_combo = ttk.Combobox(search_window, values=list(book_map.keys()), state="readonly", width=50)
    book_combo.pack(pady=5)

    result_box = tk.Text(search_window, width=55, height=12)
    result_box.pack(pady=10)

    def search_book():
        selected_book = book_combo.get()
        if not selected_book:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

        book_id = book_map[selected_book]

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT r.user_name, b.title, ib.issue_date, ib.return_date
            FROM IssuedBooks ib
            JOIN Readers r ON ib.reader_id = r.reader_id
            JOIN Books b ON ib.book_id = b.book_id
            WHERE b.book_id = %s
        """, (book_id,))
        results = cursor.fetchall()
        conn.close()

        result_box.delete(1.0, tk.END)
        if results:
            for user_name, title, issue_date, return_date in results:
                if return_date is None:
                    status = "–∫–Ω–∏–≥–∞ –∑–∞—Ä–∞–∑ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                else:
                    status = f"–∫–Ω–∏–≥–∞ –±—É–¥–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∞ {return_date}"
                result_box.insert(tk.END, f"{user_name} ‚Äî '{title}' (–≤–∑—è—Ç–æ {issue_date}) ‚Äî {status}\n")
        else:
            result_box.insert(tk.END, "–¶—é –∫–Ω–∏–≥—É –∑–∞—Ä–∞–∑ –Ω—ñ—Ö—Ç–æ –Ω–µ —Ç—Ä–∏–º–∞—î.\n")

    tk.Button(search_window, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", command=search_book).pack(pady=5)

def show_edit_book_window():
    edit_window = tk.Toplevel()  # —Ä–æ–±–∏–º–æ Toplevel, —â–æ–± –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –Ω–æ–≤–∏–π —Ü–∏–∫–ª –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    edit_window.title("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–∞ —Ç–∏–ø—É –∫–Ω–∏–≥–∏")
    edit_window.geometry("500x500")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥–∏ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫
    books = get_books()
    book_dict = {f"{title} (ID: {book_id})": book_id for book_id, title in books}

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–∏ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫
    rooms = get_reading_rooms()
    room_dict = {f"{name} (ID: {room_id})": room_id for room_id, name in rooms}

    # –ö–Ω–∏–≥–∞
    tk.Label(edit_window, text="–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:").pack()
    book_combobox = ttk.Combobox(edit_window, width=40, values=list(book_dict.keys()))
    book_combobox.pack(pady=5)

    # –¢–∏–ø –¥–æ—Å—Ç—É–ø—É
    tk.Label(edit_window, text="–¢–∏–ø –¥–æ—Å—Ç—É–ø—É:").pack()
    access_type_var = StringVar()
    access_type_combobox = ttk.Combobox(edit_window, textvariable=access_type_var, state='readonly')
    access_type_combobox['values'] = [
        "–£ —á–∏—Ç–∞–ª—å–Ω—ñ–π –∑–∞–ª—ñ —ñ –≤ –¥–æ–º–∞",
        "–¢—ñ–ª—å–∫–∏ –≤ —á–∏—Ç–∞–ª—å–Ω—ñ–π –∑–∞–ª—ñ"
    ]
    access_type_combobox.pack(pady=5)

    # –ó–∞–ª
    tk.Label(edit_window, text="–û–±–µ—Ä—ñ—Ç—å –∑–∞–ª:").pack()
    room_combobox = ttk.Combobox(edit_window, width=40, values=list(room_dict.keys()))
    room_combobox.pack(pady=5)

    # –ü–æ–ª–∏—Ü—è
    tk.Label(edit_window, text="–ü–æ–ª–∏—Ü—è:").pack()
    shelf_entry = Entry(edit_window)
    shelf_entry.pack(pady=5)

    # –†—è–¥
    tk.Label(edit_window, text="–†—è–¥:").pack()
    row_entry = Entry(edit_window)
    row_entry.pack(pady=5)

    def load_book_info(event):
        selected_key = book_combobox.get()
        if not selected_key:
            return
        book_id = book_dict[selected_key]

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT access_type FROM Books WHERE book_id = %s", (book_id,))
        result = cursor.fetchone()
        if result:
            access_type_combobox.set(result[0])
        else:
            access_type_combobox.set("")

        cursor.execute("SELECT room_id, shelf, `row` FROM Placements WHERE book_id = %s LIMIT 1", (book_id,))
        result = cursor.fetchone()
        conn.close()
        if result:
            room_id, shelf, row = result
            # –ó–Ω–∞–π—Ç–∏ –∫–ª—é—á –∑–∞ room_id
            for name, rid in room_dict.items():
                if rid == room_id:
                    room_combobox.set(name)
                    break
            shelf_entry.delete(0, END)
            shelf_entry.insert(0, shelf)
            row_entry.delete(0, END)
            row_entry.insert(0, row)
        else:
            room_combobox.set("")
            shelf_entry.delete(0, END)
            row_entry.delete(0, END)

    book_combobox.bind("<<ComboboxSelected>>", load_book_info)

    def update_book():
        selected_book = book_combobox.get()
        if not selected_book:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É.")
            return

        book_id = book_dict[selected_book]
        access_type = access_type_var.get()
        selected_room = room_combobox.get()
        shelf = shelf_entry.get()
        row = row_entry.get()

        if not selected_room or not access_type or not shelf or not row:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–£—Å—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ.")
            return

        room_id = room_dict[selected_room]

        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE Books SET access_type = %s WHERE book_id = %s", (access_type, book_id))
            cursor.execute("DELETE FROM Placements WHERE book_id = %s", (book_id,))
            cursor.execute(
                "INSERT INTO Placements (book_id, room_id, shelf, `row`) VALUES (%s, %s, %s, %s)",
                (book_id, room_id, shelf, row)
            )
            conn.commit()
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))
        finally:
            conn.close()

    update_btn = ttk.Button(edit_window, text="–û–Ω–æ–≤–∏—Ç–∏", command=update_book)
    update_btn.pack(pady=10)

def show_librarian_window(user):
    librarian_window = Tk()
    librarian_window.title("–í—ñ–∫–Ω–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è")
    librarian_window.geometry("400x250")

    # –í–∏–∑–Ω–∞—á–∏–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: —è–∫—â–æ user - —Ü–µ user_id (int), –≤–∏–≤–µ–¥–µ–º–æ —Ç–∞–∫, —è–∫—â–æ –ª–æ–≥—ñ–Ω (str) - —Ç–∞–∫
    if isinstance(user, int):
        greeting = f"–í—ñ—Ç–∞—î–º–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user} (–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä)!"
    else:
        greeting = f"–í—ñ—Ç–∞—î–º–æ, {user} (–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä)!"

    Label(librarian_window, text=greeting, font=("Arial", 16), pady=30).pack()

    Button(librarian_window, text="–í–∏–π—Ç–∏", font=("Arial", 12),
           command=lambda: [librarian_window.destroy(), login_window()]).pack(pady=20)

    librarian_window.mainloop()

def show_librarian_stats():
    stats_window = tk.Toplevel()
    stats_window.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤")
    stats_window.geometry("600x400")

    # –†–∞–º–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è —Ç–∞ –∫–Ω–æ–ø–æ–∫
    selection_frame = tk.Frame(stats_window)
    selection_frame.pack(fill=tk.X, pady=10)

    tk.Label(selection_frame, text="–û–±–µ—Ä—ñ—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è:").pack(side=tk.LEFT, padx=5)

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT u.user_id, l.name
        FROM Users u
        JOIN Librarians l ON u.user_id = l.librarian_id
    """)
    librarians = cursor.fetchall()
    librarian_map = {f"{name} (ID: {user_id})": user_id for user_id, name in librarians}
    conn.close()

    librarian_combo = ttk.Combobox(selection_frame, values=list(librarian_map.keys()), state="readonly", width=30)
    librarian_combo.pack(side=tk.LEFT, padx=5)

    # –ö–Ω–æ–ø–∫–∏
    def get_specific_stats():
        result_text.delete(1.0, tk.END)
        selected = librarian_combo.get()
        if not selected:
            result_text.insert(tk.END, "–ü–æ–º–∏–ª–∫–∞: –û–±–µ—Ä—ñ—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è.\n")
            return

        librarian_id = librarian_map[selected]
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT COUNT(DISTINCT ib.reader_id)
            FROM IssuedBooks ib
            WHERE ib.librarian_id = %s
        """, (librarian_id,))
        count = cursor.fetchone()[0]
        conn.close()

        result_text.insert(tk.END, f"–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä {selected} –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–≤ {count} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —á–∏—Ç–∞—á—ñ–≤.\n")

    def get_general_stats():
        result_text.delete(1.0, tk.END)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT l.name, COUNT(DISTINCT ib.reader_id) as reader_count
            FROM Librarians l
            LEFT JOIN IssuedBooks ib ON l.librarian_id = ib.librarian_id
            GROUP BY l.librarian_id, l.name
        """)
        results = cursor.fetchall()
        conn.close()

        total = sum(row[1] for row in results)
        stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —á–∏—Ç–∞—á—ñ–≤:\n\n"
        for name, count in results:
            stats_text += f"{name}: {count} —á–∏—Ç–∞—á—ñ–≤\n"
        stats_text += f"\n–ó–∞–≥–∞–ª–æ–º –≤—Å—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–ª–∏ {total} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —á–∏—Ç–∞—á—ñ–≤"
        result_text.insert(tk.END, stats_text)

    tk.Button(selection_frame, text="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ", command=get_specific_stats).pack(side=tk.LEFT, padx=5)
    tk.Button(selection_frame, text="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", command=get_general_stats).pack(side=tk.LEFT, padx=5)

    # –ü–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (—Ç–µ–ø–µ—Ä –≤–Ω–∏–∑—É)
    result_text = tk.Text(stats_window, wrap=tk.WORD)
    result_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

def show_admin_window(user_login):
    admin_window = tk.Tk()
    admin_window.title("–í—ñ–∫–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    admin_window.geometry("450x900")

    tk.Label(admin_window, text=f"–í—ñ—Ç–∞—î–º–æ, {user_login} (–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)!", font=("Arial", 16)).pack(pady=10)

    # –í–∏–±—ñ—Ä –∫–Ω–∏–≥–∏
    tk.Label(admin_window, text="–û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É:").pack(anchor="w", padx=10)
    tk.Label(admin_window, text="(–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ ID –∫–Ω–∏–≥–∏)").pack(anchor="w", padx=10)
    books = get_books()
    book_map = {f"{title} (ID: {book_id})": book_id for book_id, title in books}
    book_combo = ttk.Combobox(admin_window, values=list(book_map.keys()), state="readonly", width=50)
    book_combo.pack(padx=10, pady=5)

    # –¢–∏–ø –¥–æ—Å—Ç—É–ø—É
    tk.Label(admin_window, text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–Ω–∏–≥–∏:").pack(anchor="w", padx=10, pady=(15, 0))
    access_combo = ttk.Combobox(admin_window, values=["–¢—ñ–ª—å–∫–∏ –≤ —á–∏—Ç–∞–ª—å–Ω—ñ–π –∑–∞–ª—ñ", "–£ —á–∏—Ç–∞–ª—å–Ω—ñ–π –∑–∞–ª—ñ —ñ –≤–¥–æ–º–∞"], state="readonly", width=35)
    access_combo.current(0)
    access_combo.pack(padx=10, pady=5)

    # –ß–∏—Ç–∞–ª—å–Ω—ñ –∑–∞–ª–∏
    tk.Label(admin_window, text="–û–±–µ—Ä—ñ—Ç—å —á–∏—Ç–∞–ª—å–Ω—ñ –∑–∞–ª–∏:").pack(anchor="w", padx=10, pady=(15, 0))
    rooms = get_reading_rooms()
    room_vars = []
    rooms_frame = tk.Frame(admin_window)
    rooms_frame.pack(padx=20, pady=5, fill='x')
    for room_id, room_name in rooms:
        var = tk.IntVar()
        tk.Checkbutton(rooms_frame, text=room_name, variable=var).pack(anchor='w')
        room_vars.append((var, room_id))

    # –ü–æ–ª–∏—Ü—è
    tk.Label(admin_window, text="–û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–∏—Ü—é (Shelf):").pack(anchor="w", padx=10, pady=(15, 0))
    shelf_combo = ttk.Combobox(admin_window, values=["A", "B", "C", "D", "E"], state="readonly", width=5)
    shelf_combo.current(0)
    shelf_combo.pack(padx=10, pady=5)

    # –†—è–¥
    tk.Label(admin_window, text="–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥ (Row):").pack(anchor="w", padx=10, pady=(15, 0))
    row_combo = ttk.Combobox(admin_window, values=[str(i) for i in range(1, 11)], state="readonly", width=5)
    row_combo.current(0)
    row_combo.pack(padx=10, pady=5)

    def on_save():
        selected_book = book_combo.get()
        if not selected_book:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É.")
            return
        book_id = book_map[selected_book]

        selected_rooms = [room_id for var, room_id in room_vars if var.get() == 1]
        if not selected_rooms:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —á–∏—Ç–∞–ª—å–Ω–∏–π –∑–∞–ª.")
            return

        shelf = shelf_combo.get()
        row = row_combo.get()
        access_type = access_combo.get()

        save_distribution(book_id, selected_rooms, shelf, row)

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE Books SET access_type = %s WHERE book_id = %s", (access_type, book_id))
        conn.commit()
        conn.close()

        messagebox.showinfo("–£—Å–ø—ñ—à–Ω–æ", "–ö–Ω–∏–≥—É —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ access_type.")

    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    tk.Button(admin_window, text="–†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –∫–Ω–∏–≥—É", command=on_save, width=25).pack(pady=10)
    tk.Button(admin_window, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–∏–≥—É", command=show_edit_book_window).pack(pady=5)
    tk.Button(admin_window, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ–≤", command=show_librarian_stats).pack(pady=5)
    tk.Button(admin_window, text="–•—Ç–æ —Ç—Ä–∏–º–∞—î –∫–Ω–∏–≥—É", command=find_who_has_book).pack(pady=5)
    tk.Button(admin_window, text="–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—ñ –∑–∞ –∑–∞–ª–æ–º", command=get_librarians_worked_in_room).pack(pady=5)
    tk.Button(admin_window, text="–ü–æ—à—É–∫ –∫–Ω–∏–≥ –∑–∞ –Ω–∞–∑–≤–æ—é/–∞–≤—Ç–æ—Ä–æ–º/ID", command=find_books_by_work_or_author).pack(pady=5)
    tk.Button(admin_window, text="–í–∏–π—Ç–∏", command=admin_window.destroy).pack(pady=10)

    admin_window.mainloop()
    